<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="./index.xsl"?>

<!--
这是官网首页内容，同时也是简体中文的本地化内容。

其它语言的本化地内容，需要重新改写本文件中除注释外的所有内容。
-->

<docs lang="zh-hans">
    <title>apidoc | RESTful API 文档处理工具</title>
    <license url="https://creativecommons.org/licenses/by/4.0/deed.zh">署名 4.0 国际 (CC BY 4.0)</license>

    <!-- 类型描述中表格的相关本化地信息 -->
    <type-locale>
        <header>
            <name>名称</name>
            <type>类型</type>
            <required>必填</required>
            <description>描述</description>
        </header>
    </type-locale>

    <doc id="about" title="关于">
        <p>apidoc 是一个简单的 <abbr title="Representational State Transfer">RESTful</abbr> <abbr title="Application Programming Interface">API</abbr> 文档生成工具，它从代码注释中提取特定格式的内容，生成文档。支持诸如 Go、Java、C++、Rust 等大部分开发语言，具体可使用 <code>apidoc -l</code> 命令行查看所有的支持列表。</p>

        <p>apidoc 拥有以下特点：</p>
        <ol>
            <li>跨平台，linux、windows、macOS 等都支持；</li>
            <li>支持语言广泛，即使是不支持，也很方便扩展；</li>
            <li>支持多个不同语言的多个项目生成一份文档；</li>
            <li>输出模板可自定义；</li>
        </ol>

        <p>以下是一段简短的 C 语言风格代码下的示例：</p>
        <pre><![CDATA[/**
 * <api method="GET" summary="获取所有的用户信息">
 *     <path path="/users">
 *         <query name="page" type="number" default="0">显示第几页的内容</query>
 *         <query name="size" type="number" default="20">每页显示的数量</query>
 *     </path>
 *     <tag>user</tag>
 *     <server>users</server>
 *     <response status="200" type="object" mimetype="application/json">
 *         <param name="count" type="int" optional="false" summary="符合条件的所有用户数量" />
 *         <param name="users" type="object" array="true" summary="用户列表">
 *             <param name="id" type="int" summary="唯一 ID" />
 *             <param name="name" type="string" summary="姓名" />
 *         </param>
 *     </response>
 *     <response status="500" mimetype="application/json" type="obj">
 *         <param name="code" type="int" summary="错误代码" />
 *         <param name="msg" type="string" summary="错误内容" />
 *     </response>
 * </api>
 */]]></pre>
        <p>多行注释中，每一行中以<code>空白字符+symbol+空白字符</code>开头的，这些字符将会被过滤，symbol 表示该注释块的起始字符中的任意字符。比如以上代码中，所有的 <var>*</var> 将被过滤。</p>
    </doc>

    <doc id="usage" title="使用" />

    <doc id="spec" title="文档格式">
        <p>文档采用 XML 格式。存在两个顶级标签：<code>apidoc</code> 和 <code>api</code>，用于描述整体内容和具体接口信息。</p>

        <p>文档被从注释中提取之后，最终会被合并成一个 XML 文件，在该文件中 <code>api</code> 作为 <code>apidoc</code> 的一个子元素存在，如果你的项目不想把文档写在注释中，也可以直接编写一个完整的 XML 文件，将 <code>api</code> 作为 <code>apidoc</code> 的一个子元素。</p>

        <p>具体可参考<a href="./example/index.xml">示例代码</a>。</p>

        <p>以下是对各个 XML 元素以及参数介绍，其中以 <code>@</code> 开头的表示 XML 属性；<code>.</code>表示为当前元素的内容；其它表示子元素。</p>
    </doc>

    <doc id="install" title="安装" parent="usage">
        <p>可以直接从 <a href="https://github.com/caixw/apidoc/releases">https://github.com/caixw/apidoc/releases</a> 查找你需要的版本下载，放入 <code>PATH</code> 中即可使用。如果没有你需要的平台文件，则需要从源代码编译：</p>
        <ul>
            <li>下载 Go 编译工具</li>
            <li>下载源代码</li>
            <li>执行代码中 <code>build/build.sh</code> 或是 <code>build/build.cmd</code> 进行编译</li>
            <li>编译好的文件存放在 cmd/apidoc 下，可以将该文件放置在 PATH 目录</li>
        </ul>
    </doc>

    <doc id="env" title="环境变量" parent="usage">
        <p>apidoc 会读取 <var>LANG</var> 的环境变量作为其本地化的依据，若想指定其它语种，可以手动指定 <var>LANG</var> 环境变量：<samp>LANG=zh-Hant apidoc</samp>。在 windows 系统中，若不存在 <var>LANG</var> 环境变量，则会调用 <samp>GetUserDefaultLocaleName</samp> 函数来获取相应的语言信息。</p>
    </doc>

    <doc id="cli" title="命令行" parent="usage">
        <p>可以通过 <samp>apidoc -h</samp> 查看命令行支持的参数。主要包含了以下几个参数：</p>
        <table>
            <thead><tr><th>参数</th><th>描述</th></tr></thead>
            <tbody>
                <tr><td>-h</td><td>显示帮助信息</td></tr>
                <tr><td>-v</td><td>显示版本信息</td></tr>
                <tr><td>-l</td><td>列出当前支持的语言</td></tr>
                <tr><td>-d</td><td>根据指定的目录生成配置文件</td></tr>
                <tr><td>-t</td><td>检测语法是否准确</td></tr>
            </tbody>
        </table>
    </doc>

    <!-- 配置文件的类型定义 -->
    <types parent="usage">
        <type name=".apidoc.yaml">
            <description>
                <p>配置文件名固定为 <code>.apidoc.yaml</code>，格式为 YAML，可参考 <a href="example/.apidoc.yaml">.apidoc.yaml</a>。文件可以通过命令行参数 <code>-d</code> 生成。主要包含了以几个配置项：</p>
            </description>
            <item name="version" >产生此配置文件的 apidoc 版本</item>
            <item name="inputs">指定输入的数据，同一项目只能解析一种语言。</item>
            <item name="inputs.dir">需要解析的源文件所在目录</item>
            <item name="inputs.recursive">是否解析子目录下的源文件</item>
            <item name="inputs.encoding">编码，默认为 <code>utf-8</code>，值可以是 <a href="https://www.iana.org/assignments/character-sets/character-sets.xhtml">character-sets</a> 中的内容。</item>
            <item name="inputs.lang">源文件类型。具体支持的类型可通过 -l 参数进行查找</item>
            <item name="output">控制输出行为</item>
            <item name="output.path">指定输出的文件名，包含路径信息。</item>
            <item name="output.tags">只输出与这些标签相关联的文档，默认为全部。</item>
            <item name="output.style">为 XML 文件指定的 XSL 文件。</item>
        </type>
    </types>

    <types parent="spec">
        <type name="apidoc">
            <description><p>用于描述整个文档的相关内容，只能出现一次。</p></description>
            <item name="@version">文档的版本</item>
            <item name="@lang">内容的本地化 ID，比如 <code>zh-hans</code> 等。</item>
            <item name="@logo">图标</item>
            <item name="@created">文档的生成时间</item>
            <item name="title">文档的标题</item>
            <item name="description">文档的整体介绍，可以是使用 HTML 内容。</item>
            <item name="contract">联系人信息</item>
            <item name="license">内容的版权信息</item>
            <item name="tag">可以用的标签列表</item>
            <item name="server">API 基地址列表，每个 API 最少应该有一个 server。</item>
            <item name="response">表示所有 API 都有可能返回的內容</item>
            <item name="api">API 文档内容</item>
        </type>

        <type name="link">
            <description><p>用于描述链接，一般转换为 HTML 的 a 标签。</p></description>
            <item name="@url">链接指向的 URL</item>
            <item name=".">链接的文本内容</item>
        </type>

        <type name="contact">
            <description><p>用于描述联系方式</p></description>
            <item name="@url">链接的 URL，与邮箱必须二选一必填</item>
            <item name="@email">邮件地址，与 url 必须二选一必填</item>
            <item name=".">联系人名称</item>
        </type>

        <type name="tag">
            <description><p>定义标签，标签相当于关键字，作用于 API，相当于启到分类的作用。</p></description>
            <item name="@name">标签的唯一 ID，推荐采用英文字母表示。</item>
            <item name="@title">标签名称</item>
            <item name="@deprecated">表示该标签在大于等于该版本号时不再启作用</item>
        </type>

        <type name="server">
            <description><p>定义服务器的相关信息，作用于 API，决定该 API 与哪个服务器相关联。</p></description>
            <item name="@name">唯一 ID，推荐采用英文字母表示。</item>
            <item name="@url">服务基地址</item>
            <item name="@deprecated">表示在大于等于该版本号时不再启作用</item>
            <item name=".">对该服务的具体描述，可以使用 HTML 内容</item>
        </type>

        <type name="api">
            <description><p>定义接口的具体内容</p></description>
            <item name="@version">表示此接口在该版本中添加</item>
            <item name="@method">请求方法</item>
            <item name="@summary">简要介绍</item>
            <item name="@deprecated">表示在大于等于该版本号时不再启作用</item>
            <item name="@id">唯一 ID</item>
            <item name="description">该接口的详细介绍，为 HTML 内容。</item>
            <item name="path">定义路径信息</item>
            <item name="request">定义可用的请求信息</item>
            <item name="response">定义可能的返回信息</item>
            <item name="callback">定义回调接口内容</item>
            <item name="tag">关联的标签</item>
            <item name="server">关联的服务</item>
            <item name="header">传递的报头内容，如果是某个 mimetype 专用的，可以放在 request 元素中。</item>
        </type>

        <type name="path">
            <description><p>用于定义请求时与路径相关的内容</p></description>
            <item name="@path">接口地址</item>
            <item name="param">地址中的参数</item>
            <item name="query">地址中的查询参数</item>
        </type>

        <type name="request">
            <description><p>定义了请求和返回的相关内容</p></description>
            <item name="@name">当 mimetype XML 时，此值表示 XML 的顶层元素名称，否则无用。</item>
            <item name="@type">值的类型，可以是 string、number、bool 和 object</item>
            <item name="@deprecated">表示在大于等于该版本号时不再启作用</item>
            <item name="@summary">简要介绍</item>
            <item name="@array">是否为数组</item>
            <item name="@status">状态码。在 request 中，该值不可用，否则为必填项。</item>
            <item name="@mimetype">媒体类型，比如 <code>application/json</code> 等。</item>
            <item name="description">详细介绍，为 HTML 内容。</item>
            <item name="enum">当前参数可用的枚举值</item>
            <item name="param">子类型，比如对象的子元素。</item>
            <item name="example">示例代码。</item>
            <item name="header">传递的报头内容</item>
        </type>

        <type name="param">
            <description>参数类型</description>
            <item name="@name">值的名称</item>
            <item name="@type">值的类型，可以是 string、number、bool 和 object</item>
            <item name="@deprecated">表示在大于等于该版本号时不再启作用</item>
            <item name="@default">默认值</item>
            <item name="@optional">是否为可选的参数</item>
            <item name="@summary">简要介绍</item>
            <item name="@array">是否为数组</item>
            <item name="description">详细介绍，为 HTML 内容。</item>
            <item name="enum">当前参数可用的枚举值</item>
            <item name="param">子类型，比如对象的子元素。</item>
        </type>

        <type name="enum">
            <description><p>定义枚举类型的数所的枚举值</p></description>
            <item name="@value">枚举值</item>
            <item name="@deprecated">表示在大于等于该版本号时不再启作用</item>
            <item name=".">该值的详细介绍</item>
        </type>

        <type name="example">
            <description><p>示例代码</p></description>
            <item name="@mimetype">代码的 mimetype 类型。</item>
            <item name=".">示例代码的内容，需要使用 CDATA 包含代码。</item>
        </type>

        <type name="header">
            <description><p>定义了请求和返回的报头结构</p></description>
            <item name="@name">报头的名称</item>
            <item name="@deprecated">表示在大于等于该版本号时不再启作用</item>
            <item name="@summary">对报头的描述</item>
            <item name="description">对报头的描述</item>
        </type>

        <type name="callback">
            <description><p>定义接口回调的相关内容</p></description>
            <item name="@method">请求方法</item>
            <item name="@summary">简要介绍</item>
            <item name="@deprecated">表示在大于等于该版本号时不再启作用</item>
            <item name="description">该接口的详细介绍</item>
            <item name="path">定义路径信息</item>
            <item name="request">定义可用的请求信息</item>
            <item name="response">定义可能的返回信息</item>
        </type>

        <type name="version">
            <description>
                <p>版本号格式，遵循 <a href="https://semver.org/lang/zh-CN/">semver</a> 的规则。比如 <samp>1.1.1</samp>、<samp>0.1.0</samp> 等。</p>
            </description>
        </type>
    </types>

    <footer>
        <license>
            <p>当前页面内容托管于 </p><p>，并采用</p><p>进行许可。</p>
        </license>
    </footer>
</docs>
